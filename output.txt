File: /Users/dragos/websites/bit-tools2/tools/social_post_generator.py
from langchain.prompts import PromptTemplate
from langchain_openai import ChatOpenAI
from .utils import create_openrouter_llm
from .base import BaseTool
from config import OPENROUTER_API_KEY, OPENROUTER_BASE_URL, DEFAULT_MODEL
import re

social_prompt_template = """
You are a versatile social media content creator specializing in platform-specific posts. Follow these key principles:

Key Principles:
1. High energy and motivation
2. Direct and no-nonsense approach
3. Practical advice and actionable insights
4. Empowerment and positivity
5. Repetition for emphasis

Platform-Specific Guidelines for {platform}:

For Twitter:
- Keep it under 280 characters
- Use hashtags strategically
- Create engagement hooks
- Include calls to action
- Use emojis appropriately

For Bluesky:
- Similar to Twitter but more tech-focused
- Engage with the tech community
- Use relevant hashtags
- Create discussion points
- Keep it professional yet engaging

For Facebook:
- Longer format allowed
- Include visual descriptions
- Create shareable content
- Encourage discussion
- Use formatting for readability

For Reddit:
- Platform-specific formatting
- Focus on community value
- Include TL;DR when needed
- Be authentic and direct
- Follow subreddit conventions

Topic: {topic}
Tone: {tone}

Create 10 engaging, platform-optimized posts that:
- Use powerful, motivational language
- Get straight to the point
- Create urgency when appropriate
- Engage directly with the audience
- Are optimized for {platform}

Format each post on a new line. Make them platform-appropriate.
"""

class SocialPostGenerator(BaseTool):
    """Social Post Generator tool implementation."""
    
    @property
    def name(self) -> str:
        return "Social Media Post Generator"
    
    @property
    def description(self) -> str:
        return "Create engaging social media posts for Twitter, Bluesky, Facebook, or Reddit in various tones."
    
    @property
    def icon(self) -> str:
        return """<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 7.5h1.5m-1.5 3h1.5m-7.5 3h7.5m-7.5 3h7.5m3-9h3.375c.621 0 1.125.504 1.125 1.125V18a2.25 2.25 0 0 1-2.25 2.25M16.5 7.5V18a2.25 2.25 0 0 0 2.25 2.25M16.5 7.5V4.875c0-.621-.504-1.125-1.125-1.125H4.125C3.504 3.75 3 4.254 3 4.875V18a2.25 2.25 0 0 0 2.25 2.25h13.5M6 7.5h3v3H6v-3Z" />
        </svg>"""
    
    @property
    def input_form_fields(self) -> dict:
        return {
            "topic": {
                "type": "textarea",
                "label": "What's your content about?",
                "placeholder": "Describe your content topic in detail for better results...",
                "required": True,
                "rows": 3
            },
            "platform": {
                "type": "select",
                "label": "Platform",
                "options": [
                    {"value": "Twitter", "label": "Twitter", "selected": True},
                    {"value": "Bluesky", "label": "Bluesky"},
                    {"value": "Facebook", "label": "Facebook"},
                    {"value": "Reddit", "label": "Reddit"}
                ]
            },
            "tone": {
                "type": "select",
                "label": "Tone",
                "options": [
                    {"value": "No specific tone", "label": "No specific tone", "selected": True},
                    {"value": "Funny", "label": "Funny"},
                    {"value": "Serious", "label": "Serious"},
                    {"value": "Controversial", "label": "Controversial"},
                    {"value": "Inspirational", "label": "Inspirational"},
                    {"value": "Educational", "label": "Educational"},
                    {"value": "Professional", "label": "Professional"}
                ]
            }
        }
    
    def process(self, inputs):
        """Process the inputs and generate posts."""
        try:
            topic = inputs.get("topic", "").strip()
            platform = inputs.get("platform", "Twitter")
            tone = inputs.get("tone", "No specific tone")
            
            if not topic:
                return {
                    "error": "Please provide a topic for your posts."
                }
            
            posts = self._generate_posts(topic, platform, tone)
            
            return {
                "metadata": {
                    "topic": topic,
                    "platform": platform,
                    "tone": tone,
                    "count": len(posts)
                },
                "titles": posts  # Using 'titles' to maintain compatibility with existing UI
            }
            
        except Exception as e:
            return {
                "error": f"Failed to generate posts: {str(e)}"
            }

    def _generate_posts(self, topic, platform, tone):
        """Generate social media posts using the LLM."""
        llm = create_openrouter_llm(
            DEFAULT_MODEL,
            OPENROUTER_API_KEY,
            OPENROUTER_BASE_URL
        )
        
        prompt = PromptTemplate(
            input_variables=["topic", "platform", "tone"],
            template=social_prompt_template
        )
        
        chain = prompt | llm
        result = chain.invoke({"topic": topic, "platform": platform, "tone": tone})
        
        # Process the result to get a list of posts
        posts_text = result.content.strip()
        
        # Remove common introductory phrases
        posts_text = re.sub(r'^.*?(?:here are|here\'s)\s+\d+.*?:\s*\n*', '', posts_text, flags=re.IGNORECASE | re.MULTILINE)
        posts_text = re.sub(r'Okay,?\s*', '', posts_text, flags=re.IGNORECASE)
        
        # Split and clean posts
        posts = []
        lines = [line.strip() for line in posts_text.split('\n') if line.strip()]
        
        for line in lines:
            cleaned_line = re.sub(r'^\d+\.\s*|\*\s*|\-\s*', '', line)
            if cleaned_line:
                posts.append(cleaned_line)
        
        return posts[:10]  # Ensure we return at most 10 posts

# Create an instance of the tool
social_post_generator_tool = SocialPostGenerator()File: /Users/dragos/websites/bit-tools2/tools/__init__.py
from .title_generator import title_generator_tool
from .social_post_generator import social_post_generator_tool

_tools = {
    "ai-title-generator": title_generator_tool,  # Updated this line
    "social-media-post-generator": social_post_generator_tool
}

def get_all_tools():
    """Get all available tools."""
    return list(_tools.values())

def get_tool_by_id(tool_id):
    """Get a specific tool by ID."""
    return _tools.get(tool_id)File: /Users/dragos/websites/bit-tools2/tools/utils.py
from langchain.prompts import PromptTemplate
from langchain_openai import ChatOpenAI
from langchain.chains import LLMChain

def create_openrouter_llm(model_name, api_key, base_url):
    """
    Create a LangChain LLM instance connected to OpenRouter.
    
    Args:
        model_name: The model to use (e.g., "openai/gpt-4o-mini")
        api_key: OpenRouter API key
        base_url: Base URL for OpenRouter API
        
    Returns:
        An initialized LLM instance
    """
    return ChatOpenAI(
        model=model_name,
        openai_api_key=api_key,
        openai_api_base=base_url,
        temperature=0.7,  # Adjust for more/less creative responses
    )File: /Users/dragos/websites/bit-tools2/tools/title_generator.py
from langchain.prompts import PromptTemplate
from langchain_openai import ChatOpenAI
from .utils import create_openrouter_llm
from .base import BaseTool
from config import OPENROUTER_API_KEY, OPENROUTER_BASE_URL, DEFAULT_MODEL
import re

# Create a prompt template for generating titles
# Updated prompt template with better guidelines
title_prompt_template = """
You are a versatile content title generator specializing in catchy, platform-specific titles. Follow these key principles:

Key Principles:
1. High energy and motivation
2. Direct and no-nonsense approach
3. Practical advice and actionable insights
4. Empowerment and positivity
5. Repetition for emphasis

Platform-Specific Guidelines for {platform}:

For YouTube:
- Use powerful, motivational language
- Create urgency ("Must Watch", "Do This Now")
- Include numbers and specific outcomes
- Use emotional triggers and curiosity gaps
- Focus on searchability and click-through

For Article:
- Start with strong verbs
- Use "How to" and "Why" formats
- Include specific benefits
- Focus on SEO-friendly keywords
- Consider using subtitles or colons

For TikTok:
- Keep it short and punchy
- Use trending phrases
- Include relevant emojis
- Add popular hashtags
- Make it memorable and shareable

Topic: {topic}
Style: {style}

Create 10 engaging, high-impact titles that:
- Use powerful, motivational language
- Get straight to the point
- Create urgency when appropriate
- Engage directly with the audience
- Are optimized for {platform}

Format each title on a new line. Make them catchy and platform-appropriate.
"""

class TitleGenerator(BaseTool):
    """Title Generator tool implementation."""
    
    @property
    def name(self) -> str:
        return "AI Title Generator"
    
    @property
    def description(self) -> str:
        return "Create engaging titles for YouTube videos, articles, or TikTok posts in various styles."
    
    @property
    def icon(self) -> str:
        return """<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 0 1 .865-.501 48.172 48.172 0 0 0 3.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z" />
        </svg>"""
    
    @property
    def input_form_fields(self) -> dict:
        return {
            "topic": {
                "type": "textarea",
                "label": "What's your content about?",
                "placeholder": "Describe your content topic in detail for better results...",
                "required": True,
                "rows": 3
            },
            "platform": {
                "type": "select",
                "label": "Platform",
                "options": [
                    {"value": "YouTube", "label": "YouTube", "selected": True},
                    {"value": "Article", "label": "Article"},
                    {"value": "TikTok", "label": "TikTok"}
                ]
            },
            "style": {
                "type": "select",
                "label": "Style",
                "options": [
                    {"value": "Professional", "label": "Professional", "selected": True},
                    {"value": "Funny", "label": "Funny"}
                ]
            }
        }
    
    def process(self, inputs):
        """Process the inputs and generate titles."""
        try:
            topic = inputs.get("topic", "").strip()
            platform = inputs.get("platform", "YouTube")
            style = inputs.get("style", "Professional")
            
            if not topic:
                return {
                    "error": "Please provide a topic for your titles."
                }
            
            titles = self._generate_titles(topic, platform, style)
            
            # Group titles by category for better presentation
            return {
                "metadata": {
                    "topic": topic,
                    "platform": platform,
                    "style": style,
                    "count": len(titles)
                },
                "titles": titles
            }
            
        except Exception as e:
            return {
                "error": f"Failed to generate titles: {str(e)}"
            }

    def _generate_titles(self, topic, platform, style):
        """
        Generate creative titles using the LLM.
        
        Args:
            topic: The topic for the titles
            platform: The platform (YouTube, Article, TikTok)
            style: The style (Funny, Professional)
            
        Returns:
            A list of generated titles
        """
        # Set up the LLM
        llm = create_openrouter_llm(
            DEFAULT_MODEL,
            OPENROUTER_API_KEY,
            OPENROUTER_BASE_URL
        )
        
        # Create the prompt
        prompt = PromptTemplate(
            input_variables=["topic", "platform", "style"],
            template=title_prompt_template
        )
        
        # Use the newer RunnableSequence approach instead of LLMChain
        chain = prompt | llm
        
        # Run the chain
        result = chain.invoke({"topic": topic, "platform": platform, "style": style})
        
        # Process the result to get a list of titles
        titles_text = result.content.strip()
        
        # Improved title extraction
        # First try to split by numbered lines
        titles = []
        lines = [line.strip() for line in titles_text.split('\n') if line.strip()]
        
        for line in lines:
            # Remove any numbering (1., 2., etc) or bullet points
            cleaned_line = re.sub(r'^\d+\.\s*|\*\s*|\-\s*', '', line)
            if cleaned_line:
                titles.append(cleaned_line)
        
        # If we don't have enough titles, try alternative parsing
        if len(titles) < 10:
            # Try to extract titles with more flexible pattern
            all_possible_titles = re.findall(r'(?:^|\n)(?:\d+\.|\*|\-|\–)?\s*([^\n]+)', titles_text)
            titles.extend([t.strip() for t in all_possible_titles if t.strip()])
            
            # Remove duplicates while preserving order
            seen = set()
            titles = [t for t in titles if not (t in seen or seen.add(t))]
        
        # Ensure exactly 10 titles
        if len(titles) < 10:
            # Request more titles if we don't have enough
            additional_result = chain.invoke({
                "topic": topic,
                "platform": platform,
                "style": style
            })
            additional_titles = [
                re.sub(r'^\d+\.\s*|\*\s*|\-\s*', '', line.strip())
                for line in additional_result.content.strip().split('\n')
                if line.strip()
            ]
            titles.extend(additional_titles)
        
        # Return exactly 10 unique titles
        return list(dict.fromkeys(titles))[:10]

# Create an instance of the tool for easy importing
title_generator_tool = TitleGenerator()File: /Users/dragos/websites/bit-tools2/tools/base.py
from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional

class BaseTool(ABC):
    """
    Abstract base class for all AI tools.
    
    This provides a standard interface for tool implementation,
    making it easier to add new tools to the system.
    """
    
    @property
    @abstractmethod
    def name(self) -> str:
        """Return the name of the tool."""
        pass
    
    @property
    @abstractmethod
    def description(self) -> str:
        """Return a description of what the tool does."""
        pass
    
    @property
    def icon(self) -> str:
        # Default icon if not overridden
        return """<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
            <path stroke-linecap="round" stroke-linejoin="round" d="M9 9.563C9 9.252 9.252 9 9.563 9h4.874c.311 0 .563.252.563.563v4.874c0 .311-.252.563-.563.563H9.564A.562.562 0 0 1 9 14.437V9.564Z" />
        </svg>"""
    
    @property
    def id(self) -> str:
        """Return the tool ID used in URLs and for lookup."""
        return self.name.lower().replace(' ', '-')
    
    @property
    def route(self) -> str:
        """Return the URL route for the tool."""
        return f"/tools/{self.id}"
    
    @abstractmethod
    def process(self, inputs: Dict[str, Any]) -> Dict[str, Any]:
        """
        Process the inputs and return the results.
        
        Args:
            inputs: Dictionary of input parameters from the form
            
        Returns:
            Dictionary of results to be passed to the results page
        """
        pass
    
    @property
    @abstractmethod
    def input_form_fields(self) -> Dict[str, Dict[str, Any]]:
        """
        Return the configuration for the input form fields.
        
        Returns:
            Dictionary containing form field definitions
        """
        pass
    
    def validate_inputs(self, inputs: Dict[str, Any]) -> List[str]:
        """
        Validate the inputs and return error messages.
        
        Args:
            inputs: Dictionary of input parameters from the form
            
        Returns:
            List of error messages, empty if validation passed
        """
        return []File: /Users/dragos/websites/bit-tools2/config.py
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# OpenRouter API configuration
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_BASE_URL = "https://openrouter.ai/api/v1"

# Default model to use
DEFAULT_MODEL = os.getenv("DEFAULT_MODEL")

# Application settings
DEBUG = TrueFile: /Users/dragos/websites/bit-tools2/components/header.py
from fasthtml.common import *


def header(current_page="/"):
    """
    Creates a consistent header with navigation.

    Args:
        current_page: The current page path, used to highlight the active link

    Returns:
        A Header component with navigation
    """
    # Define the SVG logo as a string
    logo_svg = '''<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 100" width="300" height="60">
  <!-- AI Logo Element on Left -->
  <g fill="white">
    <!-- Brain/Circuit Node Design -->
    <circle cx="60" cy="50" r="25" fill="none" stroke="white" stroke-width="2"/>
    <circle cx="60" cy="50" r="4"/>
    
    <!-- Connection Lines -->
    <line x1="60" y1="25" x2="60" y2="15" stroke="white" stroke-width="2"/>
    <line x1="60" y1="75" x2="60" y2="85" stroke="white" stroke-width="2"/>
    <line x1="35" y1="50" x2="25" y2="50" stroke="white" stroke-width="2"/>
    <line x1="85" y1="50" x2="95" y2="50" stroke="white" stroke-width="2"/>
    
    <!-- Neural Network Nodes -->
    <circle cx="60" cy="15" r="4"/>
    <circle cx="60" cy="85" r="4"/>
    <circle cx="25" cy="50" r="4"/>
    <circle cx="95" cy="50" r="4"/>
    
    <!-- Additional Connection Lines -->
    <line x1="43" y1="33" x2="35" y2="25" stroke="white" stroke-width="2"/>
    <line x1="77" y1="33" x2="85" y2="25" stroke="white" stroke-width="2"/>
    <line x1="43" y1="67" x2="35" y2="75" stroke="white" stroke-width="2"/>
    <line x1="77" y1="67" x2="85" y2="75" stroke="white" stroke-width="2"/>
    
    <!-- Additional Nodes -->
    <circle cx="35" cy="25" r="4"/>
    <circle cx="85" cy="25" r="4"/>
    <circle cx="35" cy="75" r="4"/>
    <circle cx="85" cy="75" r="4"/>
  </g>
  
  <!-- Text "Bit Tools" on Right -->
  <text x="120" y="60" font-family="Arial, sans-serif" font-size="32" font-weight="bold" fill="white">Bit Tools</text>
</svg>'''

    nav_items = [
        ("Home", "/"),
        ("Tools", "/tools"),
        ("About", "/about"),
        ("Contact", "/contact")
    ]

    nav_links = []
    for title, path in nav_items:
        is_current = current_page == path or (
            current_page.startswith("/tools/") and path == "/tools"
        )
        link_class = "text-white hover:text-gray-300 px-3 py-2"
        if is_current:
            link_class += " font-bold underline"

        nav_links.append(
            Li(
                A(title, href=path, cls=link_class)
            )
        )

    return Header(
        Div(
              A("Bit Tools", href="/", cls="text-xl font-bold text-white"),
            Nav(
                Ul(
                    *nav_links,
                    cls="flex space-x-2"
                ),
                cls="ml-auto"
            ),
            cls="container mx-auto flex items-center justify-between px-4 py-3"
        ),
        cls="bg-blue-600 shadow-md"
    )File: /Users/dragos/websites/bit-tools2/components/page_layout.py
from fasthtml.common import *
from .header import header
from .footer import footer

def page_layout(title, content, current_page="/"):
    """
    Creates a consistent page layout with header and footer.
    
    Args:
        title: The page title
        content: The main content components
        current_page: The current page path
        
    Returns:
        A complete HTML page
    """
    return Html(
        Head(
            Title(title),
            Meta(charset="UTF-8"),
            Meta(name="viewport", content="width=device-width, initial-scale=1.0"),
            Script(src="https://cdn.tailwindcss.com"),
            Script(defer=True, **{"data-domain": "bit-tools.com", "src": "https://an.bitdoze.com/js/script.js"}),
        ),
        Body(
            Div(
                header(current_page),
                Main(
                    Div(
                        content,
                        cls="container mx-auto px-4 py-8"
                    ),
                    cls="flex-grow"
                ),
                footer(),
                cls="flex flex-col min-h-screen"
            )
        )
    )File: /Users/dragos/websites/bit-tools2/components/__init__.py
from .header import header
from .footer import footer
from .page_layout import page_layout

__all__ = ['header', 'footer', 'page_layout']File: /Users/dragos/websites/bit-tools2/components/footer.py
from fasthtml.common import *

def footer():
    """Creates a consistent footer."""
    return Footer(
        Div(
            P("© 2025 Bit Tools. All rights reserved.", cls="text-center text-gray-500"),
            cls="container mx-auto px-4 py-6"
        ),
        cls="bg-gray-100 mt-auto"
    )File: /Users/dragos/websites/bit-tools2/components/social_icons.py
from fasthtml.common import *
from fasthtml.components import NotStr

def social_icons():
    """Return a social icons component with hover effects."""
    return Div(
        # Twitter
        A(
            NotStr('''<svg width="1em" height="1em" class="w-6 h-6 text-gray-600 group-hover:text-white transition-colors duration-300">
                <path fill="currentColor" d="M22.46 6c-.77.35-1.6.58-2.46.69c.88-.53 1.56-1.37 1.88-2.38c-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29c0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15c0 1.49.75 2.81 1.91 3.56c-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.2 4.2 0 0 1-1.93.07a4.28 4.28 0 0 0 4 2.98a8.52 8.52 0 0 1-5.33 1.84q-.51 0-1.02-.06C3.44 20.29 5.7 21 8.12 21C16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56c.84-.6 1.56-1.36 2.14-2.23"></path>
            </svg>'''),
            href="https://twitter.com/bitdoze",
            cls="group inline-flex items-center justify-center w-12 h-12 rounded-lg bg-gray-100 hover:bg-blue-500 transition-all duration-300 hover:scale-110",
            **{"aria-label": "Twitter"}
        ),
        # Bluesky
        A(
            NotStr('''<svg class="w-6 h-6 text-gray-600 group-hover:text-white transition-colors duration-300" viewBox="0 0 512 512" fill="currentColor">
                <path d="M111.8 62.2C170.2 105.9 233 194.7 256 242.4c23-47.6 85.8-136.4 144.2-180.2c42.1-31.6 110.3-56 110.3 21.8c0 15.5-8.9 130.5-14.1 149.2C478.2 298 412 314.6 353.1 304.5c102.9 17.5 129.1 75.5 72.5 133.5c-107.4 110.2-154.3-27.6-166.3-62.9l0 0c-1.7-4.9-2.6-7.8-3.3-7.8s-1.6 3-3.3 7.8l0 0c-12 35.3-59 173.1-166.3 62.9c-56.5-58-30.4-116 72.5-133.5C100 314.6 33.8 298 15.7 233.1C10.4 214.4 1.5 99.4 1.5 83.9c0-77.8 68.2-53.4 110.3-21.8z"></path>
            </svg>'''),
            href="https://bsky.app/profile/bitdoze.com",
            cls="group inline-flex items-center justify-center w-12 h-12 rounded-lg bg-gray-100 hover:bg-sky-500 transition-all duration-300 hover:scale-110",
            **{"aria-label": "Bluesky"}
        ),
        # YouTube
        A(
            NotStr('''<svg width="1em" height="1em" class="w-6 h-6 text-gray-600 group-hover:text-white transition-colors duration-300">
                <path fill="currentColor" d="m10 15l5.19-3L10 9zm11.56-7.83c.13.47.22 1.1.28 1.9c.07.8.1 1.49.1 2.09L22 12c0 2.19-.16 3.8-.44 4.83c-.25.9-.83 1.48-1.73 1.73c-.47.13-1.33.22-2.65.28c-1.3.07-2.49.1-3.59.1L12 19c-4.19 0-6.8-.16-7.83-.44c-.9-.25-1.48-.83-1.73-1.73c-.13-.47-.22-1.1-.28-1.9c-.07-.8-.1-1.49-.1-2.09L2 12c0-2.19.16-3.8.44-4.83c.25-.9.83-1.48 1.73-1.73c.47-.13 1.33-.22 2.65-.28c1.3-.07 2.49-.1 3.59-.1L12 5c4.19 0 6.8.16 7.83.44c.9.25 1.48.83 1.73 1.73"></path>
            </svg>'''),
            href="https://www.youtube.com/channel/UCGsUtKhXsRrMvYAWm8q0bCg",
            cls="group inline-flex items-center justify-center w-12 h-12 rounded-lg bg-gray-100 hover:bg-red-500 transition-all duration-300 hover:scale-110",
            **{"aria-label": "YouTube"}
        ),
        # GitHub
        A(
            NotStr('''<svg width="1em" height="1em" class="w-6 h-6 text-gray-600 group-hover:text-white transition-colors duration-300">
                <path fill="currentColor" d="M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33s1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2"></path>
            </svg>'''),
            href="https://github.com/bitdoze",
            cls="group inline-flex items-center justify-center w-12 h-12 rounded-lg bg-gray-100 hover:bg-gray-800 transition-all duration-300 hover:scale-110",
            **{"aria-label": "GitHub"}
        ),
        cls="flex justify-center gap-4"
    )File: /Users/dragos/websites/bit-tools2/main.py
from fasthtml.common import *

# Import page content from the pages directory
from pages.home import home as home_page
from pages.about import about as about_page
from pages.contact import contact as contact_page
from pages.tools import tools as tools_page
from pages.tool_pages import tool_page, tool_results_page

# Import the tools registry
from tools import get_all_tools, get_tool_by_id

# Import the page layout component
from components.page_layout import page_layout  # Update this line

# Initialize the FastHTML application with Pico CSS enabled
app = FastHTML()

@app.get("/")
def home():
    """Handler for the home page route."""
    return page_layout(
        title="Home - Bit Tools",
        content=home_page(),
        current_page="/"
    )

@app.get("/about")
def about():
    return page_layout(
        title="About Us - Bit Tools",
        content=about_page(),
        current_page="/about"
    )

@app.get("/contact")
def contact():
    return page_layout(
        title="Contact Us - Bit Tools",
        content=contact_page(),
        current_page="/contact"
    )

@app.post("/submit-contact")
def submit_contact(name: str, email: str, message: str):
    """Handler for contact form submission."""
    acknowledgment = Div(
        Div(
            H1("Thank You!", cls="text-2xl font-bold mb-4"),
            P(f"Hello {name}, we've received your message and will respond to {email} soon.", cls="mb-4"),
            A("Return Home", href="/", cls="inline-block px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600")
        , cls="bg-white p-6 rounded-lg shadow-md")
    , cls="max-w-md mx-auto")
    
    return page_layout(
        title="Thank You - Bit Tools",
        content=acknowledgment,
        current_page="/contact"
    )

@app.get("/tools")
def tools():
    return page_layout(
        title="AI Tools - Bit Tools",
        content=tools_page(),
        current_page="/tools"
    )

@app.get("/tools/{tool_id}")
def tool_page_handler(tool_id: str):
    tool = get_tool_by_id(tool_id)
    if not tool:
        error_content = Div(
            Div(
                H1("Tool Not Found", cls="text-2xl font-bold mb-4"),
                P("Sorry, the requested tool could not be found.", cls="mb-4"),
                A("Back to Tools", href="/tools", cls="inline-block px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600")
            , cls="bg-white p-6 rounded-lg shadow-md")
        , cls="max-w-md mx-auto")
        
        return page_layout(
            title="Tool Not Found - Bit Tools",
            content=error_content,
            current_page="/tools"
        )
    
    return page_layout(
        title=f"{tool.name} - Bit Tools",
        content=tool_page(tool_id),
        current_page=f"/tools/{tool_id}"
    )

@app.get("/{path:path}")
def not_found(path: str):
    error_content = Div(
        Div(
            H1("404 - Page Not Found", cls="text-2xl font-bold mb-4"),
            P(f"Sorry, the page '/{path}' does not exist.", cls="mb-4"),
            A("Return Home", href="/", cls="inline-block px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600")
        , cls="bg-white p-6 rounded-lg shadow-md")
    , cls="max-w-md mx-auto")
    
    return page_layout(
        title="404 Not Found - Bit Tools",
        content=error_content,
        current_page="/"
    )

@app.post("/tools/{tool_id}/process")
async def process_tool(tool_id: str, request):
    """Handler for tool form submission."""
    tool = get_tool_by_id(tool_id)
    if not tool:
        error_content = Div(
            H1("Tool Not Found", cls="text-2xl font-bold mb-4"),
            P("Sorry, the requested tool could not be found.", cls="mb-4"),
            A("Back to Tools", href="/tools", cls="inline-block px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"),
            cls="container mx-auto max-w-md bg-white p-6 rounded-lg shadow-md text-center"
        )
        
        return page_layout(
            title="Tool Not Found - Bit Tools",
            content=error_content,
            current_page="/tools"
        )
    
    try:
        form_data = await request.form()
        inputs = {key: value for key, value in form_data.items()}
        results = tool.process(inputs)
        
        return page_layout(
            title=f"{tool.name} Results - Bit Tools",
            content=tool_results_page(tool_id, results),
            current_page=f"/tools/{tool_id}"
        )
    except Exception as e:
        error_content = Div(
            H1("Processing Error", cls="text-2xl font-bold mb-4"),
            P(f"An error occurred while processing your request: {str(e)}", cls="mb-4"),
            A("Try Again", href=f"/tools/{tool_id}", cls="inline-block px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"),
            cls="container mx-auto max-w-md bg-white p-6 rounded-lg shadow-md text-center"
        )
        
        return page_layout(
            title="Error - Bit Tools",
            content=error_content,
            current_page=f"/tools/{tool_id}"
        )

# Run the application
if __name__ == "__main__":
    serve()
File: /Users/dragos/websites/bit-tools2/pages/home.py
from fasthtml.common import *
from fasthtml.components import NotStr
from tools import get_all_tools
from components.social_icons import social_icons

def home():
    """
    Defines the home page content.

    Returns:
        Components representing the home page content
    """
    # Get tools for display
    tools_list = get_all_tools()
    
    return Div(
        # Hero section with social icons
        Div(
            Div(
                Div(
                    H1(
                        "Welcome to ",
                        Span("Bit Tools", 
                             cls="bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-indigo-500 sm:whitespace-nowrap"),
                        cls="text-5xl md:text-[3.50rem] font-bold leading-tighter tracking-tighter mb-4 font-heading"
                    ),
                    Div(
                        P("Create engaging content with our AI-powered tools.",
                          cls="text-xl text-gray-600 mb-8"),
                        cls="max-w-3xl mx-auto"
                    ),
                    # Use the social icons component
                    social_icons(),
                    cls="text-center pb-10 md:pb-16"
                ),
                cls="py-12 md:py-20"
            ),
            cls="max-w-6xl mx-auto px-4 sm:px-6"
        ),

        # Tools section (replacing Key Features)
        Div(
            H2("Our Tools", cls="text-3xl font-bold text-center mb-8"),
            Div(
                *[
                    Div(
                        Div(
                            Div(
                                NotStr(tool.icon),
                                cls="text-blue-600 w-12 h-12 mr-4"
                            ),
                            Div(
                                H3(tool.name, cls="text-xl font-semibold mb-2"),
                                P(tool.description, cls="text-gray-600"),
                                cls="flex-1"
                            ),
                            cls="flex items-start"
                        ),
                        A("Try it now →", 
                          href=tool.route,
                          cls="mt-4 inline-block text-blue-600 hover:text-blue-800 font-medium"),
                        cls="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow"
                    )
                    for tool in tools_list
                ],
                cls="grid grid-cols-1 md:grid-cols-2 gap-6 mb-12"
            ),
            cls="py-8 max-w-6xl mx-auto px-4 sm:px-6"
        ),
        cls="relative overflow-hidden"  # Moved this to be the last argument of the outer Div
    )
File: /Users/dragos/websites/bit-tools2/pages/tools.py
from fasthtml.common import *
from fasthtml.components import NotStr  # Changed from Raw to NotStr
from tools import get_all_tools

def tools():
    """Generate the tools listing page."""
    tools_list = get_all_tools()
    
    tool_cards = []
    for tool in tools_list:
        tool_cards.append(
            A(
                Div(
                    # Tool icon - using NotStr for SVG rendering
                    Div(
                        NotStr(tool.icon),  # Changed from Raw to NotStr
                        cls="text-blue-600 mb-4"
                    ),
                    H2(tool.name, 
                       cls="text-xl font-bold text-gray-800 mb-2"),
                    P(tool.description,
                      cls="text-gray-600"),
                    cls="p-6 bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow"
                ),
                href=tool.route,
                cls="block"
            )
        )
    
    return Div(
        H1("AI Tools",
           cls="text-3xl font-bold text-gray-800 mb-8 text-center"),
        P("Enhance your content creation with our AI-powered tools.",
          cls="text-xl text-gray-600 mb-12 text-center"),
        Div(
            *tool_cards,
            cls="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
        ),
        cls="container mx-auto px-4 py-8"
    )File: /Users/dragos/websites/bit-tools2/pages/__init__.py
File: /Users/dragos/websites/bit-tools2/pages/about.py
from fasthtml.common import *
from components.social_icons import social_icons
def about():
    """
    Defines the about page content.

    Returns:
        Components representing the about page content
    """
    return Div(
        # Page header
        H1("About Bit Tools",
           cls="text-3xl font-bold text-gray-800 mb-6 text-center"),

        # Main content
        Div(
            # Platform description
            Div(
                H2("Our Mission", cls="text-2xl font-semibold mb-4"),
                P("Welcome to Bit Tools, your go-to platform for AI-powered content creation tools. "
                  "We're dedicated to helping you create engaging content with minimal effort using "
                  "the power of artificial intelligence.",
                  cls="text-gray-600 mb-4"),
                P("Our tools are designed to be simple, effective, and accessible to everyone, "
                  "whether you're a content creator, marketer, or social media manager.",
                  cls="text-gray-600 mb-4"),
                
                # Features list
                H3("What We Offer", cls="text-xl font-semibold mt-6 mb-3"),
                Ul(
                    Li("🚀 AI-powered content generation", cls="mb-2"),
                    Li("🔧 Platform-specific optimizations", cls="mb-2"),
                    Li("🎯 Customizable tone and style options", cls="mb-2"),
                    Li("⚡ Fast and efficient results", cls="mb-2"),
                    cls="list-disc pl-6 text-gray-600 mb-6"
                ),
                cls="mb-8"
            ),

            # About the creator
            Div(
                H2("About the Creator", cls="text-2xl font-semibold mb-4"),
                P("Hey there! I'm Dragos, an IT professional with over a decade of experience "
                  "and a DevOps specialist for the past four years. I'm passionate about sharing "
                  "knowledge and helping others find the right tools for their needs.",
                  cls="text-gray-600 mb-4"),
                
                P("Beyond Bit Tools, I run several other technical platforms:",
                  cls="text-gray-600 mb-4"),
                
                Ul(
                    Li(
                        A("ToolHunt", href="https://toolhunt.net", cls="text-blue-600 hover:text-blue-800"),
                        " - A collection of self-hosted tools and Mac apps, built with Astro and AI",
                        cls="mb-2"
                    ),
                    Li(
                        A("WPDoze", href="https://wpdoze.com", cls="text-blue-600 hover:text-blue-800"),
                        " - WordPress tutorials and insights",
                        cls="mb-2"
                    ),
                    Li(
                        A("BitDoze", href="https://bitdoze.com", cls="text-blue-600 hover:text-blue-800"),
                        " - Linux, static sites, CMS, VPS, and DevOps resources",
                        cls="mb-2"
                    ),
                    cls="list-disc pl-6 text-gray-600 mb-6"
                ),
                cls="mb-8 bg-white p-6 rounded-lg shadow-md"
            ),

            # Connect section
            Div(
                H2("Connect With Me", cls="text-2xl font-semibold mb-4"),
                social_icons(),
                cls="mb-8"
            ),

            # Beyond Tech section
            Div(
                H2("Beyond Tech", cls="text-2xl font-semibold mb-4"),
                P("When I'm not working on technical projects, you can find me:",
                  cls="text-gray-600 mb-4"),
                Ul(
                    Li("✈️ Exploring new destinations", cls="mb-2"),
                    Li("🎬 Enjoying movies", cls="mb-2"),
                    Li("🌐 Managing multiple affiliate sites", cls="mb-2"),
                    Li("📚 Sharing knowledge with the community", cls="mb-2"),
                    cls="list-disc pl-6 text-gray-600"
                ),
                cls="bg-gray-50 p-6 rounded-lg"
            ),
            cls="max-w-4xl mx-auto"
        ),
        cls="container mx-auto px-4 py-12"
    )
File: /Users/dragos/websites/bit-tools2/pages/tool_pages.py
from fasthtml.common import *
from fasthtml.components import NotStr  # Add this import for NotStr component
from tools import get_tool_by_id

def create_form_field(field_id, field_config):
    """Create a form field based on configuration."""
    field_type = field_config.get("type", "text")
    label_text = field_config.get("label", field_id.capitalize())
    
    # Create the label
    label = Label(label_text, For=field_id, cls="block text-gray-700 font-semibold mb-2")
    
    # Create the input field based on type
    if field_type == "textarea":
        input_field = Textarea(
            id=field_id, 
            name=field_id,
            placeholder=field_config.get("placeholder", ""),
            rows=field_config.get("rows", 3),
            required=field_config.get("required", False),
            cls="w-full px-3 py-2 border rounded focus:outline-none focus:ring focus:border-blue-500"
        )
    elif field_type == "select":
        options = []
        for option in field_config.get("options", []):
            options.append(
                Option(
                    option.get("label", option.get("value", "")),
                    value=option.get("value", ""),
                    selected=option.get("selected", False)
                )
            )
        input_field = Select(
            *options,
            id=field_id,
            name=field_id,
            cls="w-full px-3 py-2 border rounded focus:outline-none focus:ring focus:border-blue-500"
        )
    else:  # Default to text input
        input_field = Input(
            type=field_type,
            id=field_id,
            name=field_id,
            placeholder=field_config.get("placeholder", ""),
            required=field_config.get("required", False),
            cls="w-full px-3 py-2 border rounded focus:outline-none focus:ring focus:border-blue-500"
        )
    
    return Div(
        label,
        input_field,
        cls="mb-6"
    )

def tool_page(tool_id):
    """
    Generate a tool page based on the tool ID.
    
    Args:
        tool_id: The ID of the tool to display
        
    Returns:
        Components representing the tool page content
    """
    # Get the tool
    tool = get_tool_by_id(tool_id)
    if not tool:
        return Div(
            H1("Tool Not Found", cls="text-3xl font-bold text-gray-800 mb-4 text-center"),
            P("Sorry, the requested tool could not be found.",
              cls="text-xl text-gray-600 mb-6 text-center"),
            A("Back to Tools", href="/tools", 
              cls="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"),
            cls="text-center py-12"
        )
    
    # Create form fields
    form_fields = []
    for field_id, field_config in tool.input_form_fields.items():
        form_fields.append(create_form_field(field_id, field_config))
    
    # Add submit button with loading state
    form_fields.append(
        Div(
            Button("Generate",
                   type="submit",
                   id="submit-button",
                   cls="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded"),
            cls="mt-2"
        )
    )
    
    return Div(
        # Page header with icon
        Div(
            NotStr(tool.icon),  # Changed from Raw to NotStr
            cls="text-blue-600 w-16 h-16 mx-auto mb-4"
        ),
        H1(tool.name,
           cls="text-3xl font-bold text-gray-800 mb-2 text-center"),
           
        P(f"Generate {tool.name.lower()} with the help of AI.",
          cls="text-xl text-gray-600 mb-8 text-center"),
        
        # Tool interface
        Div(
            Form(
                *form_fields,
                action=f"/tools/{tool_id}/process",
                method="post",
                id="tool-form",
                onsubmit="return showLoading();",
                cls="bg-white p-6 rounded-lg shadow-md"
            ),
            # Loading overlay
            Div(
                Div(
                    Div(cls="w-12 h-12 rounded-full border-4 border-blue-600 border-t-transparent animate-spin"),
                    P("Generating titles...", cls="mt-4 text-lg text-blue-600"),
                    cls="flex flex-col items-center"
                ),
                id="loading-overlay",
                cls="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
            ),
            cls="max-w-2xl mx-auto relative"
        ),
        
        # Tips section
        Div(
            H3("Tips for Better Results", cls="text-xl font-semibold mb-4"),
            Ul(
                Li("Be specific about your topic - include key points you want to highlight", cls="mb-2"),
                Li("Consider your target audience and what would appeal to them", cls="mb-2"),
                Li("The more context you provide, the better the results will be", cls="mb-2"),
                Li("Try different options to see what works best for your needs", cls="mb-2"),
                cls="list-disc list-inside text-gray-700"
            ),
            cls="mt-12 max-w-2xl mx-auto bg-blue-50 p-6 rounded-lg"
        ),
        
        # JavaScript for loading state
        Script("""
            function showLoading() {
                document.getElementById('loading-overlay').classList.remove('hidden');
                document.getElementById('submit-button').disabled = true;
                // Return true to allow the form to submit
                return true;
            }
            
            // Make sure loading overlay is hidden when page loads
            document.addEventListener('DOMContentLoaded', function() {
                // Reset any previous state
                const loadingOverlay = document.getElementById('loading-overlay');
                if (loadingOverlay) {
                    loadingOverlay.classList.add('hidden');
                }
                
                const submitButton = document.getElementById('submit-button');
                if (submitButton) {
                    submitButton.disabled = false;
                }
            });
        """)
    )

def tool_results_page(tool_id, results):
    """Generate a results page for a tool."""
    tool = get_tool_by_id(tool_id)
    if not tool:
        return Div(
            H1("Tool Not Found", cls="text-3xl font-bold text-gray-800 mb-4 text-center"),
            P("Sorry, the requested tool could not be found.",
              cls="text-xl text-gray-600 mb-6 text-center"),
            A("Back to Tools", href="/tools", 
              cls="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"),
            cls="text-center py-12"
        )
    
    # Handle error cases
    if "error" in results:
        return Div(
            H1("Error", cls="text-3xl font-bold text-gray-800 mb-4 text-center"),
            P(results["error"], cls="text-xl text-red-600 mb-6 text-center"),
            A("Try Again", href=tool.route, 
              cls="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"),
            cls="text-center py-12"
        )

    # Get metadata and titles
    metadata = results.get("metadata", {})
    titles = results.get("titles", [])
    
    # Ensure we have titles to display
    if not titles and "topic" in results:
        topic = results.get("topic", "")
        platform = results.get("platform", "")
        style = results.get("style", "")
        titles = results.get("titles", [])
        metadata = {"topic": topic, "platform": platform, "style": style}
    
    return Div(
        # Page header
        H1(f"{tool.name} Results",
           cls="text-3xl font-bold text-gray-800 mb-2 text-center"),
           
        P("Here are your generated titles:",
          cls="text-xl text-gray-600 mb-8 text-center"),
        
        # Results section
        Div(
            # Summary of request
            Div(
                P(f"Topic: {metadata.get('topic', '')}", cls="mb-2"),
                P(f"Platform: {metadata.get('platform', '')}", cls="mb-2"),
                P(f"Style: {metadata.get('style', '')}", cls="mb-2"),
                cls="mb-6 p-4 bg-gray-50 rounded"
            ),
            
            # Individual title cards with fixed copy functionality
            Div(
                *[
                    Div(
                        P(f"{i+1}. {title}", cls="mb-1 flex-grow"),
                        Button(
                            "Copy",
                            type="button",
                            # Fixed backslash handling in the f-string
                            onclick=f"copyText({repr(title)})",
                            cls="text-sm bg-gray-200 hover:bg-gray-300 text-gray-800 py-1 px-2 rounded ml-2"
                        ),
                        cls="flex items-center justify-between p-3 bg-white rounded shadow-sm mb-3 hover:shadow-md transition-shadow"
                    )
                    for i, title in enumerate(titles)
                ],
                cls="mb-6"
            ),
            
            # Navigation buttons
            Div(
                A(f"Generate More Titles",
                  href=tool.route,
                  cls="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-4"),
                A("Back to Tools",
                  href="/tools",
                  cls="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded"),
                cls="flex justify-center mt-6"
            ),
            
            # Updated JavaScript for copy functionality and hide loading overlay
            Script("""
                function copyText(text) {
                    const tempInput = document.createElement('textarea');
                    tempInput.value = text;
                    document.body.appendChild(tempInput);
                    tempInput.select();
                    document.execCommand('copy');
                    document.body.removeChild(tempInput);
                    
                    const button = event.target;
                    const originalText = button.textContent;
                    button.textContent = 'Copied!';
                    button.disabled = true;
                    
                    setTimeout(() => {
                        button.textContent = originalText;
                        button.disabled = false;
                    }, 2000);
                }
                
                // Hide any loading overlays that might still be visible from the previous page
                document.addEventListener('DOMContentLoaded', function() {
                    const loadingOverlay = document.getElementById('loading-overlay');
                    if (loadingOverlay) {
                        loadingOverlay.classList.add('hidden');
                    }
                    
                    // Also reset any disabled submit buttons
                    const submitButton = document.getElementById('submit-button');
                    if (submitButton) {
                        submitButton.disabled = false;
                    }
                });
            """),
            
            cls="max-w-2xl mx-auto bg-white p-6 rounded-lg shadow-md"
        )
    )File: /Users/dragos/websites/bit-tools2/pages/contact.py
from fasthtml.common import *
from components.social_icons import social_icons


def contact():
    """
    Defines the contact page with a form.

    Returns:
        Components representing the contact page content
    """
    return Div(
        # Page header
        Div(
            H1("Contact Us",
               cls="text-4xl font-bold text-gray-800 mb-2 text-center"),
            P("Get in touch with us for any questions or feedback",
              cls="text-xl text-gray-600 mb-8 text-center"),
            cls="py-8"
        ),

        # Contact information and form
        Div(
            # Contact info
            Div(
                Div(
                    H2("Contact Information", cls="text-2xl font-semibold mb-6"),
                    
                    # Email with icon
                    Div(
                        NotStr('''<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                        </svg>'''),
                        Div(
                            P("Email", cls="text-sm text-gray-500"),
                            P("dragos@bit-tools.com", cls="font-medium"),
                            cls="ml-4"
                        ),
                        cls="flex items-center mb-6"
                    ),
                    
                    # Connect with us section
                    Div(
                        H3("Connect With Us", cls="text-xl font-semibold mb-4"),
                        social_icons(),
                           
                    
                        cls="mt-8"
                    ),
                    
                    # FAQ or additional info
                    Div(
                        H3("Quick Response", cls="text-xl font-semibold mb-3"),
                        P("We typically respond to all inquiries within 24-48 hours during business days.",
                          cls="text-gray-600 mb-4"),
                        cls="mt-8 bg-blue-50 p-6 rounded-lg"
                    ),
                    
                    cls="bg-white p-8 rounded-lg shadow-md h-full"
                ),
                cls="w-full md:w-2/5 mb-8 md:mb-0 md:pr-6"
            ),

            # Contact form
            Div(
                Div(
                    H2("Send a Message", cls="text-2xl font-semibold mb-6"),
                    Form(
                        # Name field
                        Div(
                            Label("Name", For="name", cls="block text-gray-700 font-medium mb-2"),
                            Input(type="text", id="name", name="name",
                                placeholder="Your name",
                                cls="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"),
                            cls="mb-6"
                        ),
                        # Email field
                        Div(
                            Label("Email", For="email", cls="block text-gray-700 font-medium mb-2"),
                            Input(type="email", id="email", name="email",
                                placeholder="Your email address",
                                cls="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"),
                            cls="mb-6"
                        ),
                        # Subject field
                        Div(
                            Label("Subject", For="subject", cls="block text-gray-700 font-medium mb-2"),
                            Input(type="text", id="subject", name="subject",
                                placeholder="What is this regarding?",
                                cls="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"),
                            cls="mb-6"
                        ),
                        # Message field
                        Div(
                            Label("Message", For="message", cls="block text-gray-700 font-medium mb-2"),
                            Textarea(id="message", name="message",
                                    placeholder="Your message here...",
                                    rows=6,
                                    cls="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"),
                            cls="mb-6"
                        ),
                        # Submit button
                        Button("Send Message",
                            type="submit",
                            cls="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300"),
                        action="/submit-contact",
                        method="post",
                        cls="w-full"
                    ),
                    cls="bg-white p-8 rounded-lg shadow-md"
                ),
                cls="w-full md:w-3/5"
            ),
            cls="md:flex gap-6 max-w-6xl mx-auto"
        ),
        cls="container mx-auto px-4 py-12"
    )
